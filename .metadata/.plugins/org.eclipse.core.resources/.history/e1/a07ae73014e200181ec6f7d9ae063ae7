#include "Teller.h"

typedef struct {
	int available;
	int break_number;
	int break_time;
	pthread_t id;
} Teller;

static Teller tellers[3];

void create_teller_threads(void){
	// loop to create 3 teller threads
	for(i = 0; i < 3; i++) {
		ret = pthread_create(&tellers[i].id, NULL, &teller_thread, (void *)i);
		if (ret != 0){
			printf("ERROR: pthread_create() failed\n");
			exit(EXIT_FAILURE);
		}
	}
}


/* Purpose: Thread function for the customer queue
 * Inputs:  (void *) arg for arguments added in pthread_create
 * Output:  None
 */
void *customer_thread(void *arg){
	// initialize customer arguments
	Customer *queue;
	int count = 0;
	// int last_customer_count = 0;
	queue = malloc(sizeof(Customer));
	queue[count].queue_enter_time = 0;  // initialized to first count
	queue[count].queue_exit_time = 0;
	queue[count].transaction_time = rand() % 450 + 30;
	count++;
	printf("Creation of customer queue\n");
	// loop for while the queue is not empty and bank is open
	// note: the bank will always be open before customer_thread is started
	while (count > 0 || bank_open){

	}


	// for each new customer, realloc(queue, sizeof(Customer))

	free(queue);

	pthread_exit(NULL);
}
