#include "Teller.h"

// GLOBALS
static Teller tellers[3];

/* Purpose: Creates threads for tellers
 * Inputs:  None
 * Outputs: None
 */
void create_teller_threads(void){
	// loop to create 3 teller threads
	for(i = 0; i < 3; i++) {
		ret = pthread_create(&tellers[i].id, NULL, &teller_thread, (void *)i);
		if (ret != 0){
			printf("ERROR: pthread_create() failed\n");
			exit(EXIT_FAILURE);
		}
	}
}

/* Purpose: Thread function for the teller
 * Inputs:  None
 * Output:  None
 */
void *teller_thread(void *arg){
	int i = (int)arg;
	// initialize teller arguments
	tellers[i].available = 1;
	tellers[i].break_number = 0;
	tellers[i].break_time = 0;

	printf("Creation of teller %d\n", i+1);
	// loop for whole day of work
	while(bank_open){
		// nested loop waiting for teller to be unavailable
		while(!tellers[i].available){
			// do teller stuff
		}
	}
	pthread_exit(NULL);
}


