#include "Timing.h"

#include <math.h>
void *close_bank(void *arg){
	if(timer_count >= 6){
		bank_open = 0;
		time_t rawtime;
		struct tm * timeinfo;
		time ( &rawtime );
		timeinfo = localtime ( &rawtime );
		printf ( "END! Time and date: %s\n", asctime (timeinfo) );
		timer_delete((timer_t)arg);
	}
	pthread_exit(NULL);
}

void open_bank_timer(int seconds_open){
	time_t rawtime;
	struct tm * timeinfo;
	time ( &rawtime );
	timeinfo = localtime ( &rawtime );
	printf ( "OPEN! Time and date: %s\n", asctime (timeinfo) );

	struct sigevent interupt;
	struct itimerspec value;
	struct itimerspec old_value;
	struct timespec end;
	struct timespec restart;
	timer_t timer_id;

	interupt.sigev_notify = SIGEV_THREAD;
	interupt.sigev_notify_function = &close_bank;
	interupt.sigev_notify_attributes = NULL;
	interupt.sigev_value.sival_ptr = &timer_id;

	end.tv_sec = (unsigned long)(seconds_open / 10000);
	// for scaling purposes: 1 second of time is 1us simulated time
	if (seconds_open < 10000) end.tv_nsec = (unsigned long)(seconds_open * 1000000);
	else end.tv_nsec = (long)(seconds_open % 10000) * 1000000;
	restart.tv_nsec = 0;
	restart.tv_sec = 0;
	value.it_interval = restart;
	value.it_value = end;
	old_value.it_interval = restart;
	old_value.it_value = restart;

	bank_open = 1;
	timer_create(CLOCK_REALTIME, &interupt, &timer_id);
	timer_settime(timer_id, 0, &value, &old_value);
}

int get_bank_open(void){
	return bank_open;
}
